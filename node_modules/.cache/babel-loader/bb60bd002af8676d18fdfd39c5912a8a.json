{"ast":null,"code":"var _jsxFileName = \"/Users/vivi/Desktop/code/food/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/React.createContext({\n  items: [],\n  totalAmount: 0,\n  addItem: item => {},\n  removeItem: id => {}\n});\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id = action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    const updatedItems = state.items.concat(action.item);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/vivi/Desktop/code/food/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","createContext","items","totalAmount","addItem","item","removeItem","id","defaultCartState","cartReducer","state","action","type","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","existingCartItem","updatedItems","concat","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AAC3CC,EAAAA,KAAK,EAAC,EADqC;AAE3CC,EAAAA,WAAW,EAAE,CAF8B;AAG3CC,EAAAA,OAAO,EAAGC,IAAD,IAAQ,CAAE,CAHwB;AAI3CC,EAAAA,UAAU,EAAGC,EAAD,IAAM,CAAE;AAJuB,CAApB,CAApB;AAOP,MAAMC,gBAAgB,GAAG;AACvBN,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMM,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,kBAAkB,GAAGH,KAAK,CAACP,WAAN,GAAoBQ,MAAM,CAACN,IAAP,CAAYS,KAAZ,GAAoBH,MAAM,CAACN,IAAP,CAAYU,MAA/E;AACA,UAAMC,qBAAqB,GAAGN,KAAK,CAACR,KAAN,CAAYe,SAAZ,CAC1BZ,IAAI,IAAIA,IAAI,CAACE,EAAL,GAAUI,MAAM,CAACN,IAAP,CAAYE,EADJ,CAA9B;AAGA,UAAMW,gBAAgB,GAAGR,KAAK,CAACR,KAAN,CAAYc,qBAAZ,CAAzB;AAEA,UAAMG,YAAY,GAAGT,KAAK,CAACR,KAAN,CAAYkB,MAAZ,CAAmBT,MAAM,CAACN,IAA1B,CAArB;AAEA,WAAO;AACLH,MAAAA,KAAK,EAAEiB,YADF;AAELhB,MAAAA,WAAW,EAAEU;AAFR,KAAP;AAID;;AACD,SAAOL,gBAAP;AACD,CAhBD;;AAkBA,MAAMa,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCzB,UAAU,CAACU,WAAD,EAAcD,gBAAd,CAAlD;;AAEA,QAAMiB,oBAAoB,GAAIpB,IAAD,IAAU;AACrCmB,IAAAA,kBAAkB,CAAC;AAACZ,MAAAA,IAAI,EAAE,KAAP;AAAcP,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMqB,yBAAyB,GAAInB,EAAD,IAAQ;AACxCiB,IAAAA,kBAAkB,CAAC;AAACZ,MAAAA,IAAI,EAAE,QAAP;AAAiBL,MAAAA,EAAE,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMoB,WAAW,GAAG;AAClBzB,IAAAA,KAAK,EAAEqB,SAAS,CAACrB,KADC;AAElBC,IAAAA,WAAW,EAAEoB,SAAS,CAACpB,WAFL;AAGlBC,IAAAA,OAAO,EAAEqB,oBAHS;AAIlBnB,IAAAA,UAAU,EAAEoB;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACM;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvBD;;GAAMP,Y;;KAAAA,Y;AAyBN,eAAeA,YAAf","sourcesContent":["import React, { useReducer } from 'react';\n\nexport const CartContext = React.createContext({\n    items:[],\n    totalAmount: 0,\n    addItem: (item)=>{},\n    removeItem: (id)=>{}\n});\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(\n        item => item.id = action.item.id\n    )\n    const existingCartItem = state.items[existingCartItemIndex];\n    \n    const updatedItems = state.items.concat(action.item);\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({type: 'ADD', item: item});\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({type: 'REMOVE', id: id});\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}